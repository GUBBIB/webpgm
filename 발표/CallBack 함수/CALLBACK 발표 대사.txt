발표 대사

1페이지
안녕하십니까 CALLBACK함수의 대해서 발표를 하게된 21학번 장문용이라고합니다.
우선 목차를 보겠습니다.

2페이지
총 6가지 구성으로 되어있고 
CALLBACK함수란 무엇이고 왜 필요한지와 CALLBACK함수의 자세한 기능등을 살펴볼 것입니다.

3페이지
CALLBACK 함수란 다른 함수가 특정 작업을 마친후 실행될 함수입니다.
사용 방법으로는 함수 A의 매개변수로 B함수를 주는 것 입니다.
코드를 보시면 greet함수의 매개변수로 sayGoodbye 함수를 주고 있습니다.
JavaScript에서는 함수도 일종의 객체처럼 다룰 수 있기에, 이런 방식으로 함수 간에 데이터를 전달하고 작업을 처리할 수 있습니다. 
이처럼 JavaScript에서 함수 = 객체 라는 것은 매우 중요한 개념입니다.

다음
4페이지
CALLBACK 함수의 필요성
CALLBACK 함수가 왜 필요한지를 알기전에 비동기 프로그래밍과 동기 프로그래밍에 대해서 알아야할 필요가 있습니다.
우선 비동기 프로그래밍이란 A작업을 하던 중 시간이 오래걸리는 작업 요청이 생겼을 때, 해당 작업을 기다리지 않고 바로 다음 코드로 넘어가 다른 작업을 실행시키는 것을 비동기 프로그래밍 이라고합니다. 한마디로 운영체제에서 다중 프로그래밍의 개념과 비슷한 개념입니다.
반대로 동기 프로그래밍은 순차적으로 실행되는 배치 프로그래밍과 비슷한 개념입니다.

요기서 CALLBACK 함수는 비동기 작업을 처리할 때 유용한 기법입니다.
한가지 예를 들자면 서버에서 파일 다운로드를 완료 한 후, 실행할 코드가 있을 때, 비동기 방식에서는 다운로드가 완료되기도 전에 다음 코드가 실행될 수 있습니다. 이때 콜백 함수를 사용하면 다운로드가 끝난 후에 다음 작업을 실행하도록 할 수 있습니다. 즉, 콜백 함수는 순차적인 실행을 보장하여, 문제가 생기지 않도록 도와주며, 코드가 간단해지고 관리하기 용이해집니다.

다음으로는
5페이지
익명 함수와 화살표 함수 형태의 CALLBACK 함수입니다.

익명 함수와 화살표 함수의 공통점은 함수를 한 번만 사용해야 할 경우 유용하며, 사용할 경우 코드가 간결해지고 즉석 사용이 가능하다는 점입니다.
하지만 코드가 복잡해지면 가독성이 떨어질 수 있고, 함수의 이름이 없기 때문에 오류 발생시 원인 파악이 어려워 질 수있다는 단점이 있습니다.

앞서 나온 예시를 조금 수정하여 설명드리겠습니다.
앞에서는 greet함수 호출시 매개변수로 saygoodbye함수를 줬지만 익명 함수는 이름 없이 그 자리에서 바로 정의한 함수 객체를 매개변수로 줬습니다.

화살표 함수 또한 익명 함수와 마찬가지로 매개변수로 그 자리에서 정의한 함수 객체를 매개변수로 주었습니다.

6페이지
그렇다면 익명 함수와 화살표 함수의 차이점은 무엇일까요
바로 this가 참조하는 객체가 다르다는 것 입니다.
익명함수에서는 this.name이 window나 global 객체를 참조하고 있지만 화살표 함수에서는 obj 객체를 참조하는 것을 볼수 있습니다.

이렇게 익명함수는 호출하는 시점의 객체를 참조하고 화살표함수는 선언 시점의 객체를 참조한다는 차이점이 있습니다.

그 다음으로는
7페이지 
이벤트 리스너에서의 CALLBACK함수 사용 입니다

우선 이벤트 리스너란 DOM 요소에 이벤트를 감지하고, 해당 이벤트가 발생하면 함수를 실행하게 해주는 함수입니다.

밑의 간단한 코드를 살펴 보면 id가 myButton인 button태그를 생성했고
JavaScript에서 id가 myButton인 엘리먼트에 클릭 이벤트가 발생시 알림창이 뜨게 익명함수로 작성하여 리스너를 추가해줬습니다.

여기서 callback 함수는 클릭 이벤트가 발생한 후 지정한 동작을 실행하는 중요한 역할을 합니다. 이 방식은 특정 이벤트에 반응하는 방식을 직관적으로 구현하게 해주며, 비동기 작업이나 이벤트 처리처럼 시간 차가 있는 작업에서 효율적인 코드를 작성하는 데 유용합니다. callback 함수는 코드의 흐름을 제어하고, 비동기 처리를 더 쉽게 관리할 수 있도록 도와줍니다.

8페이지
이상으로 callback 함수에 대한 발표를 마치겠습니다. 감사합니다.